From 68481a65e5aadaa927b9dde6a640b6229c49c81b Mon Sep 17 00:00:00 2001
From: Daire McNamara <daire.mcnamara@microchip.com>
Date: Tue, 28 Sep 2021 20:52:32 +0100
Subject: [PATCH 61/93] uio: can: clear interrupt in kernel, not user-space

---
 drivers/uio/uio-microchip-can.c | 193 ++++++++++++++++----------------
 1 file changed, 94 insertions(+), 99 deletions(-)

diff --git a/drivers/uio/uio-microchip-can.c b/drivers/uio/uio-microchip-can.c
index 29ad0ff696c5..5145c0c114ad 100644
--- a/drivers/uio/uio-microchip-can.c
+++ b/drivers/uio/uio-microchip-can.c
@@ -1,19 +1,11 @@
+// SPDX-License-Identifier: GPL-2.0
 /*
- * MSS CAN UIO driver (uio_mss_can)
+ * This driver exports interrupts and CAN register space
+ * to user space for applications interacting with PDMA
  *
- * This driver exports interrupts and MSS CAN register space
- * to user space for applications interacting with MSS CAN
+ * Copyright (C) 2018 - 2021 Microchip Incorporated - http://www.microchip.com/
  *
- * Copyright (C) 2018-19 Microchip Incorporated - http://www.microchip.com/
- *
- * This program is free software; you can redistribute it and/or
- * modify it under the terms of the GNU General Public License as
- * published by the Free Software Foundation version 2.
- *
- * This program is distributed "as is" WITHOUT ANY WARRANTY of any
- * kind, whether express or implied; without even the implied warranty
- * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
+ * Author: Daire McNamara <daire.mcnamara@microchip.com>
  */
 #include <linux/device.h>
 #include <linux/module.h>
@@ -29,173 +21,176 @@
 #include <linux/of.h>
 #include <linux/genalloc.h>
 
-#define DRV_NAME "mss-can-uio"
+#define DRV_NAME "can-uio"
 #define DRV_VERSION "0.1"
 
 #define CAN_INT_ENABLE (4)
 #define CAN_INT_STATUS (0)
 
-#define MAX_MSS_CAN_EVT	1
+#define MAX_CAN_EVT	1
 
-struct uio_mss_can_dev {
-	struct uio_info *info;
-	struct clk *mss_can_clk;
-	void __iomem *mss_can_io_vaddr;
+struct uio_can_dev {
+	struct uio_info *uio_info;
+	struct clk *clk;
+	void __iomem *base;
 	int irq;
-	unsigned int pintc_base;
 };
 
-static irqreturn_t mss_can_handler(int irq, struct uio_info *info)
+static irqreturn_t can_handler(int irq, struct uio_info *uio_info)
 {
-	struct uio_mss_can_dev *dev_info = info->priv;
+	struct uio_can_dev *dev_info = uio_info->priv;
+	void __iomem *base = dev_info->base;
 	int val;
-	void __iomem *base = dev_info->mss_can_io_vaddr + dev_info->pintc_base;
-	void __iomem *intren_reg = base + CAN_INT_ENABLE;
-	void __iomem *intrstat_reg = base + CAN_INT_STATUS;
 
-	val = ioread32(intren_reg);
-	/* Is interrupt enabled and active ? */
-	if (!(val & 0xffff) && (ioread32(intrstat_reg) & 0xffff))
+	val = ioread32(base + CAN_INT_STATUS);
+
+	/* clear anything that was active */
+	iowrite32(val, base + CAN_INT_STATUS);
+
+	/* is interrupt enabled and active ? */
+	if (!(val & 0xffff) && (ioread32(base + CAN_INT_ENABLE) & 0xffff))
 		return IRQ_NONE;
+
 	return IRQ_HANDLED;
 }
 
-static void mss_can_cleanup(struct device *dev,
-		struct uio_mss_can_dev *dev_info)
+static void can_cleanup(struct device *dev, struct uio_can_dev *dev_info)
 {
 	int cnt;
-	struct uio_info *p = dev_info->info;
+	struct uio_info *uio_info = dev_info->uio_info;
 
-	for (cnt = 0; cnt < MAX_MSS_CAN_EVT; cnt++, p++) {
-		uio_unregister_device(p);
-		kfree(p->name);
+	for (cnt = 0; cnt < MAX_CAN_EVT; cnt++, uio_info++) {
+		uio_unregister_device(uio_info);
+		kfree(uio_info->name);
 	}
-	iounmap(dev_info->mss_can_io_vaddr);
-	kfree(dev_info->info);
-	clk_disable(dev_info->mss_can_clk);
-	clk_put(dev_info->mss_can_clk);
+	iounmap(dev_info->base);
+	kfree(dev_info->uio_info);
+	clk_disable(dev_info->clk);
+	clk_put(dev_info->clk);
 	kfree(dev_info);
 }
 
-static int mss_can_probe(struct platform_device *pdev)
+static int can_probe(struct platform_device *pdev)
 {
-	struct uio_info *p;
-	struct uio_mss_can_dev *dev_info;
-	struct resource *regs_mss_can_io;
+	struct uio_info *uio_info;
+	struct uio_can_dev *dev_info;
+	struct resource *res;
 	struct device *dev = &pdev->dev;
 	int ret = -ENODEV, cnt = 0, len;
-	/* struct uio_mss_can_pdata *pdata = dev_get_platdata(dev); TODO */
-
-	dev_info(dev, "Running Probe\n");
 
-	dev_info = kzalloc(sizeof(struct uio_mss_can_dev), GFP_KERNEL);
+	dev_info = kzalloc(sizeof(*dev_info), GFP_KERNEL);
 	if (!dev_info)
 		return -ENOMEM;
 
-	dev_info->info = kzalloc(sizeof(*p) * MAX_MSS_CAN_EVT, GFP_KERNEL);
-	if (!dev_info->info) {
+	dev_info->uio_info = kzalloc(sizeof(*dev_info->uio_info) * MAX_CAN_EVT, GFP_KERNEL);
+	if (!dev_info->uio_info) {
 		kfree(dev_info);
 		return -ENOMEM;
 	}
 
-	/* Power on PRU in case its not done as part of boot-loader */
-	dev_info->mss_can_clk = devm_clk_get(dev, NULL);
-	if ((!dev_info->mss_can_clk) || (IS_ERR(dev_info->mss_can_clk))) {
-		dev_err(dev, "Failed to get clock\n");
-		ret = PTR_ERR(dev_info->mss_can_clk);
-		kfree(dev_info->info);
-		kfree(dev_info);
-		return ret;
-	} else {
-		ret = clk_prepare_enable(dev_info->mss_can_clk);
-		if (ret) {
-			dev_err(dev, "Failed to enable clock\n");
-			clk_put(dev_info->mss_can_clk);
-			kfree(dev_info->info);
-			kfree(dev_info);
-			return ret;
-		}
+	/* power on PRU in case its not done as part of boot-loader */
+	dev_info->clk = devm_clk_get(dev, NULL);
+	if (!dev_info->clk || (IS_ERR(dev_info->clk))) {
+		dev_err(dev, "failed to get clock\n");
+		ret = PTR_ERR(dev_info->clk);
+		goto out_free;
 	}
-	devm_add_action_or_reset(dev, (void (*) (void *))clk_disable_unprepare, dev_info->mss_can_clk);
 
-	regs_mss_can_io = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	if (!regs_mss_can_io) {
-		dev_err(dev, "No MSS CAN I/O resource specified\n");
+	ret = clk_prepare_enable(dev_info->clk);
+	if (ret) {
+		dev_err(dev, "failed to enable clock\n");
+		clk_put(dev_info->clk);
 		goto out_free;
 	}
 
-	if (!regs_mss_can_io->start) {
-		dev_err(dev, "Invalid memory resource\n");
+	devm_add_action_or_reset(dev, (void (*) (void *))clk_disable_unprepare, dev_info->clk);
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!res) {
+		dev_err(dev, "no CAN I/O resource specified\n");
+		ret = -ENODEV;
 		goto out_free;
 	}
 
-	len = resource_size(regs_mss_can_io);
-	dev_info->mss_can_io_vaddr = ioremap(regs_mss_can_io->start, len);
-	if (!dev_info->mss_can_io_vaddr) {
-		dev_err(dev, "Can't remap MSS CAN I/O  address range\n");
+	len = resource_size(res);
+
+	dev_info->base = ioremap(res->start, len);
+	if (!dev_info->base) {
+		dev_err(dev, "failed to remap CAN I/O  address range\n");
+		ret = -ENODEV;
 		goto out_free;
 	}
 
 	dev_info->irq = platform_get_irq(pdev, 0);
+	if (dev_info->irq < 0) {
+		dev_err(dev, "failed to get irq.\n");
+		ret = -ENODEV;
+		goto out_free;
+	}
 
-	p = dev_info->info;
+	uio_info = dev_info->uio_info;
 
-	p->mem[0].addr = regs_mss_can_io->start;
-	p->mem[0].size = resource_size(regs_mss_can_io);
-	p->mem[0].memtype = UIO_MEM_PHYS;
+	uio_info->mem[0].addr = res->start;
+	uio_info->mem[0].size = resource_size(res);
+	uio_info->mem[0].memtype = UIO_MEM_PHYS;
 
-	p->mem[1].size = 0;
+	uio_info->mem[1].size = 0;
 
-	p->name = kasprintf(GFP_KERNEL, "mss_can%d", cnt);
-	p->version = DRV_VERSION;
+	uio_info->name = kasprintf(GFP_KERNEL, "uiocan%d", cnt);
+	uio_info->version = DRV_VERSION;
 
-	/* Register MSS CAN IRQ lines */
-	p->irq = dev_info->irq;
-	p->irq_flags = IRQF_SHARED;
-	p->handler = mss_can_handler;
-	p->priv = dev_info;
+	/* register CAN IRQ lines */
+	uio_info->irq = dev_info->irq;
+	uio_info->irq_flags = IRQF_SHARED;
+	uio_info->handler = can_handler;
+	uio_info->priv = dev_info;
 
-	ret = uio_register_device(dev, p);
-	if (ret < 0)
+	ret = uio_register_device(dev, uio_info);
+	if (ret < 0) {
+		dev_err(dev, "failed to register CAN device\n");
 		goto out_free;
+	}
 
 	platform_set_drvdata(pdev, dev_info);
+
+	dev_info(dev, "registered device\n");
+
 	return 0;
 
 out_free:
-	mss_can_cleanup(dev, dev_info);
+	can_cleanup(dev, dev_info);
 	return ret;
 }
 
-static int mss_can_remove(struct platform_device *dev)
+static int can_remove(struct platform_device *dev)
 {
-	struct uio_mss_can_dev *dev_info = platform_get_drvdata(dev);
+	struct uio_can_dev *dev_info = platform_get_drvdata(dev);
 
-	mss_can_cleanup(&dev->dev, dev_info);
+	can_cleanup(&dev->dev, dev_info);
 	return 0;
 }
 
 #define MICROCHIP_CAN_PM_OPS (NULL)
 
 #if defined(CONFIG_OF)
-static const struct of_device_id mss_can_dt_ids[] = {
+static const struct of_device_id can_dt_ids[] = {
 	{ .compatible = "microchip,mpfs-can-uio" },
 	{ /*sentinel */ }
 };
 #endif
 
-static struct platform_driver mss_can_driver = {
-	.probe = mss_can_probe,
-	.remove = mss_can_remove,
+static struct platform_driver can_driver = {
+	.probe = can_probe,
+	.remove = can_remove,
 	.driver = {
 		.name = DRV_NAME,
 		.pm = MICROCHIP_CAN_PM_OPS,
-		.of_match_table = of_match_ptr(mss_can_dt_ids),
+		.of_match_table = of_match_ptr(can_dt_ids),
 		.owner = THIS_MODULE,
 		   },
 };
 
-module_platform_driver(mss_can_driver);
+module_platform_driver(can_driver);
 
 MODULE_LICENSE("GPL v2");
 MODULE_VERSION(DRV_VERSION);
-- 
2.30.2

